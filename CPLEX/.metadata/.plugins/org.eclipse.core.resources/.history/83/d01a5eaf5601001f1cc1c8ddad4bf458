/*********************************************
 * OPL 22.1.1.0 Model
 * Author: papemayeldiagnethiam
 * Creation Date: Apr 23, 2024 at 10:57:45 AM
 *********************************************/

int nbvilles = 100;

range villes = 1..nbvilles;

float c[i in villes][j in villes] = rand(50); // Correction : Utiliser rand(10, 50) pour générer des valeurs entre 10 et 50

range ss = 1..(ftoi(pow(2, nbvilles)) - 1); // Correction : Utiliser ftoi(pow(2, nbvilles)) - 1 pour obtenir le bon nombre de sous-ensembles

{int} sub[s in ss] = {i | i in villes: (s div ftoi(pow(2, i-1))) mod 2 == 1}; // Correction : Utiliser pow(2, i-1) pour calculer les sous-ensembles

dvar boolean x[villes][villes];

minimize sum (i, j in villes) c[i][j] * x[i][j];

subject to {
    // Contraintes d'entrée et de sortie de chaque ville
    forall(j in villes) sum (i in villes) x[i][j] == 1;
    forall(i in villes) sum (j in villes) x[i][j] == 1;

    // Contraintes pour éliminer les sous-tours
    forall(s in ss: 2 < card(sub[s]) < nbvilles)
        sum (i in sub[s], j in sub[s]) x[i][j] <= card(sub[s]) - 1;
}

execute POSTPROCESS {
    var a = 1;
    for (var b = 1; b < nbvilles + 1; b++) {
        for (var c = 1; c < nbvilles + 1; c++) {
            if (x[a][c] > 0) {
                write(a);
                a = c;
                if (a == 1) {
                    b = nbvilles + 1;
                    break;
                } else {
                    write("->");
                }
            }
        }
    }
}
